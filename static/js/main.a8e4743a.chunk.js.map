{"version":3,"sources":["components/Convert1.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Convert1","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","dataChanged","event","setState","data","target","value","convert","console","log","state","trim","dataArray","replace","split","result","i","length","react_default","a","createElement","es_alert","message","type","divider","es_form","className","Item","input","TextArea","key","rows","onChange","es_button","onClick","React","Component","SubMenu","Menu","Header","Layout","Content","Sider","Main","Convert1_Convert1","Convert2","handleSubmit","_this2","layout","width","style","background","menu","mode","defaultSelectedKeys","defaultOpenKeys","height","borderRight","title","icon","history","push","padding","breadcrumb","margin","minHeight","react_router","exact","path","component","form","withRouter","App","react_router_dom","src_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8e4743a.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Icon, Input, Form, Button, Divider, Alert\n} from 'antd';\n\nexport default class Convert1 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {data: '', result: ''};\n\n    // this.handleChange = this.handleChange.bind(this);\n    // this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <Alert\n          message=\"用于转化横向Hex至纵向Hex，比如<br/>12 23 34 78\\n34 56 78 90将被转化为\\n1223\\n3478\\n3456\\n7890\"\n          type=\"success\"\n        />\n        <Divider/>\n        <Form className=\"convert-form\">\n          <Form.Item>\n            <Input.TextArea key=\"data\" rows=\"10\" onChange={this.dataChanged}/>\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" onClick={this.convert} className=\"login-form-button\">\n              Convert!\n            </Button>\n          </Form.Item>\n          <Form.Item>\n            <Input.TextArea key=\"result\" rows=\"20\" value={this.state.result}/>\n          </Form.Item>\n        </Form>\n      </div>\n    )\n  }\n\n  dataChanged = (event) => {\n    this.setState({\"data\": event.target.value});\n  };\n\n  convert = () => {\n    console.log(this.state.data);\n\n    let data = this.state.data.trim();\n\n    data = data.replace(/[\\n\\s]+/g, \" \");\n    let dataArray = data.split(\" \");\n\n    let result = \"\";\n    for (let i = 0; i < dataArray.length; i ++) {\n      if (i % 2 === 1) {\n        result += dataArray[i] + \"\\n\";\n      } else {\n        result += dataArray[i];\n      }\n    }\n\n    this.setState({\"result\": result});\n  };\n}","import React, {Text} from 'react';\nimport {\n  Layout, Menu, Breadcrumb, Icon, Input, Form, Button\n} from 'antd';\n\nimport {BrowserRouter as Router, Route, withRouter} from \"react-router-dom\";\n\nimport Convert1 from './components/Convert1'\n\nconst {SubMenu} = Menu;\nconst {Header, Content, Sider} = Layout;\n\nclass Main extends React.Component {\n  render() {\n    return (\n      <Layout>\n        <Header className=\"header\">\n          <div className=\"logo\"/>\n          <div className=\"site-name\">Tools Collection</div>\n          {/*<Menu*/}\n          {/*  theme=\"dark\"*/}\n          {/*  mode=\"horizontal\"*/}\n          {/*  defaultSelectedKeys={['2']}*/}\n          {/*  style={{ lineHeight: '64px' }}*/}\n          {/*>*/}\n          {/*  <Menu.Item key=\"1\">nav 1</Menu.Item>*/}\n          {/*  <Menu.Item key=\"2\">nav 2</Menu.Item>*/}\n          {/*  <Menu.Item key=\"3\">nav 3</Menu.Item>*/}\n          {/*</Menu>*/}\n        </Header>\n        <Layout>\n          <Sider width={200} style={{background: '#fff'}}>\n            <Menu\n              mode=\"inline\"\n              defaultSelectedKeys={['1']}\n              defaultOpenKeys={['sub1']}\n              style={{height: '100%', borderRight: 0}}\n            >\n              <SubMenu key=\"sub1\" title={<span><Icon type=\"user\"/>Convert Tools</span>}>\n                <Menu.Item key=\"1\" onClick={() => {\n                  this.props.history.push(\"/\")\n                }}>Tool1</Menu.Item>\n                <Menu.Item key=\"2\" onClick={() => {\n                  this.props.history.push(\"/convert/2\")\n                }}>Tool2</Menu.Item>\n                <Menu.Item key=\"3\">Tool3</Menu.Item>\n              </SubMenu>\n            </Menu>\n          </Sider>\n          <Layout style={{padding: '0 24px 24px'}}>\n            <Breadcrumb style={{margin: '16px 0'}}>\n              <Breadcrumb.Item>Tools</Breadcrumb.Item>\n            </Breadcrumb>\n            <Content style={{\n              background: '#fff', padding: 14, margin: 0, minHeight: 280,\n            }}\n            >\n              <Route exact path=\"/\" component={this.Convert1}/>\n              <Route exact path=\"/convert/2\" component={this.Convert2}/>\n            </Content>\n          </Layout>\n        </Layout>\n      </Layout>\n    )\n  };\n\n  Convert1 = () => {\n    return (\n      <Convert1/>\n    );\n  };\n\n  Convert2 = () => {\n    return (\n      <div>\n        <Form className=\"login-form\">\n          <Form.Item>\n            <Input.TextArea key=\"data\" rows=\"10\"/>\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" onClick={handleSubmit} className=\"login-form-button\">\n              Convert2!\n            </Button>\n          </Form.Item>\n          <Form.Item>\n            <Input.TextArea key=\"result\" rows=\"20\"/>\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  }\n}\n\nfunction handleSubmit(form) {\n  console.log(form);\n}\n\nexport default withRouter(Main);\n","import React from 'react';\nimport './App.css';\nimport Main from './Main';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Main />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}